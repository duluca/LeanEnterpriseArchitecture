define(['moment', 'breeze', 'validate'], function (moment, breeze, validate) {
    var dataType = breeze.DataType;
    var entityType = breeze.EntityType;
    var dataProperty = breeze.DataProperty;
    var navigationProperty = breeze.NavigationProperty;
    var autoGeneratedKeyType = breeze.AutoGeneratedKeyType;
    var validator = breeze.Validator;
    
    var
        metadataStore,
        configureMetadataStore = function (store) {
            metadataStore = store;
            addReservationResultType(metadataStore);
            addEventType(metadataStore);
            addPersonType(metadataStore);
        },

        mapToEntity = function (entity, dto) {
            // entity is an object with observables
            // dto is json
            for (prop in dto) {
                if (dto.hasOwnProperty(prop)) {
                    entity[prop](dto[prop]);
                }
            }
            return entity;
        },
        
        boolToYesNo = function (value) { //TODO: change it to a custom KO binding in model.js
            return value ? "Yes" : "No";
        },
        
        yesNoToBool = function (value) {
            value = value.toLowerCase();
            return value == "yes" || value == "true" ? true : value == "no" || value == "false" ? false : null;
        };
    
        ko.bindingHandlers.date = {
            update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
                var value = valueAccessor(),
                    allBindings = allBindingsAccessor();
                var valueUnwrapped = ko.utils.unwrapObservable(value);
                var pattern = allBindings.format || 'MM/dd/yyyy';
                $(element).text(valueUnwrapped.toString(pattern));
            }
        };

        ko.bindingHandlers.valueYesNo = {
            init: function(element, valueAccessor) {
                    var value = valueAccessor();
                    $(element).keyup(function (event) {
                        var text = $(element).val();
                        var output = yesNoToBool(text);
                        if(output != null)
                            value(output);
                    });
                    $(element).keypress(function (event) {
                        var pattern1 = "\\w";
                        var regex1 = new RegExp(pattern1);
                        if (!regex1.test(String.fromCharCode(event.keyCode))) {
                            event.preventDefault();
                        }
                    });
                },
            update: function(element, valueAccessor, allBindingsAccessor, viewModel) {
                var value = valueAccessor(),
                    allBindings = allBindingsAccessor();
                var valueUnwrapped = ko.utils.unwrapObservable(value);
                $(element).val(boolToYesNo(valueUnwrapped));
            }
        };
   
        ko.bindingHandlers.editableDate = {
            init: function (element, valueAccessor) {
                var value = valueAccessor();
                $(element).keyup(function (event) {
                    var pattern2 = "^\\d{1,2}/\\d{1,2}/\\d{4}$";
                    var regex2 = new RegExp(pattern2);
                    var text = $(element).val();
                    if (regex2.test(text)) {
                        value(new Date(text));
                    } else {
                        value(null);
                    }
                });
                
            },
            update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
                var value = valueAccessor(),
                    allBindings = allBindingsAccessor();
                
                if (value != null) {
                    var valueUnwrapped = ko.utils.unwrapObservable(value);
                    
                    if (valueUnwrapped != null) {
                        var pattern = allBindings.format;
                        if (pattern == null) pattern = 'MM/dd/yyyy';
                        $(element).val(valueUnwrapped.toString(pattern));
                    }
                }
            }
        };


        function addReservationResultType(store) {

            function typeInitializer(reservationResult) {
            };

            store.registerEntityTypeCtor('ReservationResult', function() {}, typeInitializer);
        };

        function addEventType(store) {

            function typeInitializer(event) {
            };

            store.registerEntityTypeCtor('Event', function () {}, typeInitializer);
        };

        function addPersonType(store) {

            function typeInitializer(p) {
                p.LastFirstName = ko.computed(function () {
                    return $.validator.format("{0}, {1} {2}", p.LastName(), p.FirstName(), p.MiddleName());
                });

                i.MaskedSsn = ko.computed(function () {
                    return $.validator.format("xxx-xx-{0}", i.SocialSecurityNumber().substr(-4));
                });
            };

            store.registerEntityTypeCtor('Person', function () {}, typeInitializer);
        };

    return {
        configureMetadataStore: configureMetadataStore,
        mapToEntity: mapToEntity
    };

});